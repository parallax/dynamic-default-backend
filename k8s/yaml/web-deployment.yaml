apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
  labels:
    app: '{{ app }}-{{ branch }}-{{ build }}'
  name: '{{ app }}-{{ branch }}-{{ build }}'
  namespace: 'ingress-nginx'
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: '{{ app }}-{{ branch }}-{{ build }}'
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: '{{ app }}-{{ branch }}-{{ build }}'
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - '{{ app }}-{{ branch }}-{{ build }}'
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: shared-files
          emptyDir: {}
        - name: run
          emptyDir: {}
      containers:
      - name: php
        image: '{{ image:php-fpm }}'
        env:
        - name: ENVIRONMENT
          value: '{{ environment }}'
        - name: SITE_NAME
          value: '{{ app }}'
        - name: SITE_BRANCH
          value: '{{ branch }}'
        - name: BUILD
          value: '{{ build }}'
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 1
          exec:
            command:
            - /healthcheck.sh
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 1
          exec:
            command:
            - /healthcheck.sh
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "1"
            memory: 512Mi
          requests:
            cpu: 50m
            memory: 64Mi
        volumeMounts:
          - name: shared-files
            mountPath: /src-shared
          - name: run
            mountPath: /run
      - name: openresty
        image: '{{ image:openresty }}'
        env:
        - name: ENVIRONMENT
          value: '{{ environment }}'
        - name: SITE_NAME
          value: '{{ app }}'
        - name: SITE_BRANCH
          value: '{{ branch }}'
        - name: BUILD
          value: '{{ build }}'
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: openresty
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: openresty
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 2
          timeoutSeconds: 2
        ports:
        - containerPort: 80
          name: openresty
          protocol: TCP
        resources:
          limits:
            cpu: "1"
            memory: 512Mi
          requests:
            cpu: 50m
            memory: 64Mi
        volumeMounts:
          - name: shared-files
            mountPath: /src-shared
          - name: run
            mountPath: /run
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 20